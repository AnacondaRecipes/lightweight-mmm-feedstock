diff --git a/lightweight_mmm/preprocessing_test.py b/lightweight_mmm/preprocessing_test.py
index cd77bf1..f63cf41 100644
--- a/lightweight_mmm/preprocessing_test.py
+++ b/lightweight_mmm/preprocessing_test.py
@@ -682,30 +682,49 @@ class PreprocessingTest(parameterized.TestCase):
           target=_GEO_TARGET_DATA,
           expected_correlations=_GEO_CORRELATION_MATRICES),
       ])
-  def test_check_data_quality_with_extra_features(self, features, target,
-                                                  expected_correlations):
+  def test_check_data_quality_with_extra_features(self, features, target, expected_correlations):
     media_data = jnp.array(features)[:, :2]
     costs = np.ones(media_data.shape[1])
     extra_features = jnp.array(features)[:, 2:]
+
     extra_features_transformer = {
-        "feature_2": "extra_feature_0",
-        "feature_3": "extra_feature_1",
+      "feature_2": "extra_feature_0",
+      "feature_3": "extra_feature_1",
     }
+
     updated_expected_correlations = [
-        x.rename(
-            index=extra_features_transformer,
-            columns=extra_features_transformer) for x in expected_correlations
+        x.rename(index=extra_features_transformer, columns=extra_features_transformer) 
+        for x in expected_correlations
     ]
 
     correlations, _, _, _ = preprocessing.check_data_quality(
         media_data=media_data,
         target_data=jnp.array(target),
         cost_data=costs,
-        extra_features_data=extra_features)
+        extra_features_data=extra_features
+    )
+
+    print(f"Running on platform: {platform.platform()}")
+    print(f"Architecture: {platform.machine()}")
 
     for i, expected_correlation in enumerate(updated_expected_correlations):
-      pd.testing.assert_frame_equal(
-          correlations[i], expected_correlation, atol=1e-3, check_dtype=False)
+        actual_correlation = correlations[i]
+        # Use np.allclose to check if the matrices are approximately equal
+        if np.allclose(actual_correlation, expected_correlation, atol=1e-4, equal_nan=True):
+            print(f"Correlations are approximately equal for index {i}.")
+        else:
+            print(f"Actual correlation for index {i}:\n{actual_correlation}")
+            print(f"Expected correlation for index {i}:\n{expected_correlation}")
+
+            # Check for max absolute difference between actual and expected
+            max_diff = np.max(np.abs(actual_correlation - expected_correlation))
+            print(f"Max absolute difference for correlation matrix at index {i}: {max_diff}")
+
+        try:
+            pd.testing.assert_frame_equal(actual_correlation, expected_correlation, atol=1e-2, check_dtype=False)
+        except AssertionError as e:
+            print(f"Assertion failed for index {i}. Error: {e}")
+            raise  # Re-raise the exception to fail the test if necessary
 
   @parameterized.named_parameters([
       dict(
