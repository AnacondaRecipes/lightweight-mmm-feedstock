From 02e65c1589233ef86f854cf61fe7b1b02e00acb7 Mon Sep 17 00:00:00 2001
From: Andrii Osipov <aosipov@anaconda.com>
Date: Tue, 19 Nov 2024 14:04:30 +0200
Subject: [PATCH] Fix jax array dtype

---
 lightweight_mmm/preprocessing_test.py | 33 +++++++++++++++------------
 1 file changed, 18 insertions(+), 15 deletions(-)

diff --git a/lightweight_mmm/preprocessing_test.py b/lightweight_mmm/preprocessing_test.py
index 23282ae..5a3ce94 100644
--- a/lightweight_mmm/preprocessing_test.py
+++ b/lightweight_mmm/preprocessing_test.py
@@ -636,16 +636,18 @@ class PreprocessingTest(parameterized.TestCase):
   ])
   def test_compute_correlations_returns_expected_values(
       self, features, target, expected_correlations):
-    features = jnp.array(features)
-    target = jnp.array(target)
+    features = jnp.array(features, dtype=jnp.float64)
+    target = jnp.array(target, dtype=jnp.float64)
+    print(features.dtype)  # Check the dtype of the features
+    print(target.dtype)    # Check the dtype of the target
     feature_names = [f"feature_{i}" for i in range(features.shape[1])]
 
-    correlations = preprocessing._compute_correlations(
-        features=features, target=target, feature_names=feature_names)
+    correlations = preprocessing._compute_correlations(features=features, target=target, feature_names=feature_names)
 
     for i, expected_correlation in enumerate(expected_correlations):
-      pd.testing.assert_frame_equal(
-          correlations[i], expected_correlation, atol=1e-3, check_dtype=False)
+      pd.testing.assert_frame_equal(correlations[i], expected_correlation, atol=1e-3, check_dtype=False)
+      print(f"correlations[i]:{correlations[i]}")
+      print(f"expected_correlation:{expected_correlation}")
 
   @parameterized.named_parameters([
       dict(
@@ -684,27 +686,28 @@ class PreprocessingTest(parameterized.TestCase):
       ])
   def test_check_data_quality_with_extra_features(self, features, target,
                                                   expected_correlations):
-    media_data = jnp.array(features)[:, :2]
+    media_data = jnp.array(features, dtype=jnp.float64)[:, :2]
     costs = np.ones(media_data.shape[1])
-    extra_features = jnp.array(features)[:, 2:]
+    extra_features = jnp.array(features, dtype=jnp.float64)[:, 2:]
     extra_features_transformer = {
         "feature_2": "extra_feature_0",
         "feature_3": "extra_feature_1",
     }
-    updated_expected_correlations = [
-        x.rename(
-            index=extra_features_transformer,
-            columns=extra_features_transformer) for x in expected_correlations
-    ]
+    updated_expected_correlations = [x.rename(index=extra_features_transformer,columns=extra_features_transformer) for x in expected_correlations]
 
     correlations, _, _, _ = preprocessing.check_data_quality(
         media_data=media_data,
-        target_data=jnp.array(target),
+        target_data=jnp.array(target, dtype=jnp.float64),
         cost_data=costs,
         extra_features_data=extra_features)
 
+    print(media_data.dtype)  
+    print(extra_features.dtype)  
+
     for i, expected_correlation in enumerate(updated_expected_correlations):
-        pd.testing.assert_frame_equal(correlations[i], expected_correlation, atol=1e-2, check_dtype=False, check_like=True)
+        pd.testing.assert_frame_equal(correlations[i], expected_correlation, atol=1e-3, check_dtype=False, check_like=True)
+        print(f"correlations[i]:{correlations[i]}")
+        print(f"expected_correlation:{expected_correlation}")
 
   @parameterized.named_parameters([
       dict(
-- 
2.34.1

